name: Test

on:
  push:
    branches:
      - "**"
    paths-ignore:
      - ".github/workflows/docs.yml"
      - ".github/workflows/wheels*"
      - ".gitmodules"
      - "docs/**"
      - "wheels/**"
  pull_request:
    paths-ignore:
      - ".github/workflows/docs.yml"
      - ".github/workflows/wheels*"
      - ".gitmodules"
      - "docs/**"
      - "wheels/**"
  workflow_dispatch:

permissions:
  contents: read

env:
  COVERAGE_CORE: sysmon
  FORCE_COLOR: 1

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        include:
        # Free-threaded
        - { os: "ubuntu-latest", python-version: "3.13-dev", disable-gil: true }

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} Python ${{ matrix.python-version }} ${{ matrix.disable-gil && 'free-threaded' || '' }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      if: "${{ !matrix.disable-gil }}"
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true
        cache: pip
        cache-dependency-path: |
          ".ci/*.sh"
          "pyproject.toml"

    - name: Set up Python ${{ matrix.python-version }} (free-threaded)
      uses: deadsnakes/action@v3.2.0
      if: "${{ matrix.disable-gil }}"
      with:
        python-version: ${{ matrix.python-version }}
        nogil: ${{ matrix.disable-gil }}

    - name: Set PYTHON_GIL
      if: "${{ matrix.disable-gil }}"
      run: |
        echo "PYTHON_GIL=0" >> $GITHUB_ENV

    - name: Build system information
      run: python3 .github/workflows/system-info.py

    - name: Install Linux dependencies
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        .ci/install.sh
      env:
        GHA_PYTHON_VERSION: ${{ matrix.python-version }}
        GHA_LIBIMAGEQUANT_CACHE_HIT: ${{ steps.cache-libimagequant.outputs.cache-hit }}

    - name: Register gcc problem matcher
      if: "matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'"
      run: echo "::add-matcher::.github/problem-matchers/gcc.json"

    - name: Build
      run: |
        .ci/build.sh

    - name: Test
      run: |
        .ci/test.sh
      env:
        PYTHONOPTIMIZE: ${{ matrix.PYTHONOPTIMIZE }}
