name: Test Windows

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  COVERAGE_CORE: sysmon

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]
        architecture: ["x64"]
        os: ["windows-latest"]

    timeout-minutes: 45

    name: Python ${{ matrix.python-version }} (${{ matrix.architecture }})

    steps:
    - name: Checkout Pillow
      uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Checkout cached dependencies
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        repository: python-pillow/pillow-depends
        path: winbuild\depends

    # sets env: pythonLocation
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true
        architecture: ${{ matrix.architecture }}
        cache: pip
        cache-dependency-path: ".github/workflows/test-windows.yml"

    - name: Prepare build
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: |
        & python.exe winbuild\build_prepare.py -v
      shell: pwsh

    - name: Build dependencies / zlib
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: "& winbuild\\build\\build_dep_zlib.cmd"

    - name: Build dependencies / WebP
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: "& winbuild\\build\\build_dep_libwebp.cmd"

    # for FreeType CBDT/SBIX font support
    - name: Build dependencies / libpng
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: "& winbuild\\build\\build_dep_libpng.cmd"

    # for FreeType WOFF2 font support
    - name: Build dependencies / brotli
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: "& winbuild\\build\\build_dep_brotli.cmd"

    - name: Build dependencies / FreeType
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: "& winbuild\\build\\build_dep_freetype.cmd"

    # GPL licensed
    - name: Build dependencies / libimagequant
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: "& winbuild\\build\\build_dep_libimagequant.cmd"

    # Raqm dependencies
    - name: Build dependencies / HarfBuzz
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: "& winbuild\\build\\build_dep_harfbuzz.cmd"

    # trim ~150MB for each job
    - name: Optimize build cache
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: rmdir /S /Q winbuild\build\src
      shell: cmd

    - name: Build Pillow
      run: |
        $FLAGS="-C raqm=vendor -C fribidi=vendor"
        cmd /c "winbuild\build\build_env.cmd && $env:pythonLocation\python.exe -m pip install -v $FLAGS .[tests]"
        & $env:pythonLocation\python.exe selftest.py --installed
      shell: pwsh

    # skip PyPy for speed
    - name: Enable heap verification
      if: "!contains(matrix.python-version, 'pypy')"
      run: |
        & reg.exe add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\python.exe" /v "GlobalFlag" /t REG_SZ /d "0x02000000" /f

    - name: Test Pillow
      run: |
        path %GITHUB_WORKSPACE%\winbuild\build\bin;%PATH%
        .ci\test.cmd
      shell: cmd

    - name: Prepare to upload errors
      if: failure()
      run: |
        mkdir -p Tests/errors
      shell: bash

    - name: Upload errors
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: errors
        path: Tests/errors

    - name: After success
      run: |
        .ci/after_success.sh
      shell: pwsh

    - name: Upload coverage
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: GHA_Windows
        name: ${{ runner.os }} Python ${{ matrix.python-version }}
        token: ${{ secrets.CODECOV_ORG_TOKEN }}

  success:
    permissions:
      contents: none
    needs: build
    runs-on: ubuntu-latest
    name: Windows Test Successful
    steps:
      - name: Success
        run: echo Windows Test Successful
